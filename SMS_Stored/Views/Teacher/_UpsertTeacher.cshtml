@model SMS.Model.Teacher.TeacherBO
@using SMS.ViewModel
<link href="~/css/formstyle.css" rel="stylesheet" />
<form id="teacherForm" asp-action="UpsertTeacher" asp-controller="Teacher" method="post" data-ajax="true" data-ajax-mode="replace" data-ajax-update="#createoredit">
    <div class="container d-flex justify-content-center align-items-center w-100 m-2" style="min-height: calc(100vh - 100px); margin-bottom: 50px;">
        <div class="card p-4 fr-div" style="max-width: 500px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); border-radius: 10px;">
            @*<div class="col-md-12 ">*@
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.TeacherID)
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.TeacherRegNo, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.TeacherRegNo, new { htmlAttributes = new { @class = "form-control", id = "teacherRegNo" } })
                    @Html.ValidationMessageFor(model => model.TeacherRegNo, "", new { @class = "field-validation-error" })
                    <span id="regNoExistsMsg" class="text-danger"></span>

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.FirstName, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "field-validation-error" })

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.MiddleName, new { @class = "control-label " })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "field-validation-error" })

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.LastName, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "field-validation-error" })

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.DisplayName, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", id = "teacherDisplayName" } })
                    @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "field-validation-error" })
                    <span id="displayNameExistsMsg" class="text-danger"></span>

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Email, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email", id = "teacherEmail" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "field-validation-error" })
                    <span id="emailExistsMsg" class="text-danger"></span>

                </div>
            </div>

            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Gender, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    <select class="form-select" id="genderSelect" name="Gender">
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "field-validation-error" })
                </div>
            </div>

            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.DOB, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    <input type="text" class="form-control" id="dobField" name="DOB" value="@DateFormat.ToInputDateFormat(Model.DOB)" />
                    <button type="button" id="datepickerButton" class="datepicker-icon">
                        <i class="bi bi-calendar"></i>
                    </button>
                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "field-validation-error" })
                </div>
            </div>


            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Address, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "field-validation-error" })

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.ContactNo, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.IsEnable, new { @class = "control-label" })
                </div>
                <div class="col-md p-2">
                    @Html.CheckBoxFor(model => model.IsEnable, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>


            <div class="form-group align-content-center">
                <input type="submit" value="@(Model.TeacherID== null ? "Add" : "Update")" class="btn btn-primary" style="font-size:14px;" />
                <button id="back-to-list" class="btn btn btn-secondary m-4" onclick="LoadList()">Back</button>
            </div>


        </div>
    </div>
</form>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>
    $(document).ready(function () {
        // console.log("Hello");
        $('.required').append('<span style="color: red">*</span>');
    });
    $(document).ready(function () {
        $('#dobField').datepicker({
            dateFormat: 'dd/mm/yy'
        });

      
        $('#datepickerButton').on('click', function () {
            $('#dobField').datepicker('show');
        });

        $('#teacherForm').submit(function (event) {
            event.preventDefault();

            var form = $(this);
            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: form.serialize(),
                success: function (response) {
                    addTeacherSuccess(response);
                },
                error: function (xhr, status, error) {
                    addTeacherFailure(xhr, status, error);
                }
            });
        });
        //client side validation check
        $('#teacherRegNo').change(function () {
            var regNo = $(this).val();
            $.ajax({
                url: '@Url.Action("CheckTeacherRegNoExists", "Teacher")',
                type: 'GET',
                data: { regNo: regNo },
                success: function (data) {
                    if (data.exists) {
                        $('#regNoExistsMsg').text('Registration number already exists.');
                    } else {
                        $('#regNoExistsMsg').text('');
                    }
                },
                error: function () {
                    $('#regNoExistsMsg').text('Error checking registration number.');
                }
            });
        });
        $('#teacherDisplayName').change(function () {
            var displayName = $(this).val();
            $.ajax({
                url: '@Url.Action("CheckTeacherDisplayNameExists", "Teacher")',
                type: 'GET',
                data: { displayName: displayName },
                success: function (data) {
                    if (data.exists) {
                        $('#displayNameExistsMsg').text('Display Name already exists.');
                    } else {
                        $('#displayNameExistsMsg').text('');
                    }
                },
                error: function () {
                    $('#displayNameExistsMsg').text('Error checking display name.');
                }
            });
        });
        $('#teacherEmail').change(function () {
            var email = $(this).val();
            $.ajax({
                url: '@Url.Action("CheckTeacherEmailExists", "Teacher")',
                type: 'GET',
                data: { email: email },
                success: function (data) {
                    if (data.exists) {
                        $('#emailExistsMsg').text('Email Id already exists.');
                    } else {
                        $('#emailExistsMsg').text('');
                    }
                },
                error: function () {
                    $('#emailExistsMsg').text('Error checking email id.');
                }
            });
        });
    });

</script>
