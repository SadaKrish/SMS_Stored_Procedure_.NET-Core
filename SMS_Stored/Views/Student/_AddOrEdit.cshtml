@model SMS.Model.Student.StudentBO



<style>
    .fr-div {
        margin-bottom: 10px;
    }

    .control-label, .form-control,.form-select {
        font-size: 12px;
    }
    span{
    color:red;
    }
</style>
<form id="studentForm" asp-action="AddOrEditStudent" asp-controller="Student" method="post">
    <div class="container d-flex justify-content-center align-items-center w-100 m-2" style="min-height: calc(100vh - 100px); margin-bottom: 50px;">
        <div class="card p-4 fr-div" style="max-width: 500px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); border-radius: 10px;">
            @*<div class="col-md-12 ">*@
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.StudentID)
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.StudentRegNo, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.StudentRegNo, new { htmlAttributes = new { @class = "form-control", id = "studentRegNo" } })
                    @Html.ValidationMessageFor(model => model.StudentRegNo, "", new { @class = "field-validation-error" })
                    <span id="regNoExistsMsg" class="text-danger"></span> 
                   @*  <span asp-validation-for="StudentRegNo" class="text-danger"></span> *@
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.FirstName, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "field-validation-error" })
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.MiddleName, new { @class = "control-label " })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "field-validation-error" })
                    <span asp-validation-for="MiddleName" class="text-danger"></span>
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.LastName, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "field-validation-error" })
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.DisplayName, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", id = "studentDisplayName" } })
                    @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "field-validation-error" })
                    <span id="displayNameExistsMsg" class="text-danger"></span>
                    <span asp-validation-for="DisplayName" class="text-danger"></span>
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Email, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email",id="studentEmail" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "field-validation-error" })
                    <span id="emailExistsMsg" class="text-danger"></span>
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
            </div>

            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Gender, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    <select class="form-select" id="genderSelect" name="Gender">
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "field-validation-error" })
                </div>
            </div>

            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.DOB, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control ",id = "dobField", type = "date" } })
                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "field-validation-error" })
                   
                </div>
            </div>


            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Address, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "field-validation-error" })
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.ContactNo, new { @class = "control-label required" })
                </div>
                <div class="col-md p-2">
                    @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                    <span asp-validation-for="ContactNo" class="text-danger"></span>
                </div>
            </div>
            <div class="row form-group d-flex">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.IsEnable, new { @class = "control-label" })
                </div>
                <div class="col-md p-2">
                    @Html.CheckBoxFor(model => model.IsEnable, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>


            <div class="form-group align-content-center">
                <input type="submit" value="@(Model.StudentID== null ? "Add" : "Update")" class="btn btn-primary" style="font-size:14px;" />
                <button id="back-to-list" class="btn btn btn-secondary m-4" onclick="LoadList()">Back</button>
            </div>
            

        </div>
    </div>
</form>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // console.log("Hello");
            $('.required').append('<span style="color: red">*</span>');
        });
        $(document).ready(function () {
            $('#studentForm').submit(function (event) {
                event.preventDefault();

                var form = $(this);
                $.ajax({
                    type: form.attr('method'),
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function (response) {
                        addStudentSuccess(response);
                    },
                    error: function (xhr, status, error) {
                        addStudentFailure(xhr, status, error);
                    }
                });
            });
            //client side validation check
            $('#studentRegNo').change(function () {
                var regNo = $(this).val();
                $.ajax({
                    url: '@Url.Action("CheckStudentRegNoExists", "Student")',
                    type: 'GET',
                    data: { regNo: regNo },
                    success: function (data) {
                        if (data.exists) {
                            $('#regNoExistsMsg').text('Registration number already exists.');
                        } else {
                            $('#regNoExistsMsg').text('');
                        }
                    },
                    error: function () {
                        $('#regNoExistsMsg').text('Error checking registration number.');
                    }
                });
            });
            $('#studentDisplayName').change(function () {
                var displayName = $(this).val();
                $.ajax({
                    url: '@Url.Action("CheckStudentDisplayNameExists", "Student")',
                    type: 'GET',
                    data: { displayName: displayName },
                    success: function (data) {
                        if (data.exists) {
                            $('#displayNameExistsMsg').text('Display Name already exists.');
                        } else {
                            $('#displayNameExistsMsg').text('');
                        }
                    },
                    error: function () {
                        $('#displayNameExistsMsg').text('Error checking display name.');
                    }
                });
            });
            $('#studentEmail').change(function () {
                var email = $(this).val();
                $.ajax({
                    url: '@Url.Action("CheckStudentEmailExists", "Student")',
                    type: 'GET',
                    data: { email: email },
                    success: function (data) {
                        if (data.exists) {
                            $('#emailExistsMsg').text('Email Id already exists.');
                        } else {
                            $('#emailExistsMsg').text('');
                        }
                    },
                    error: function () {
                        $('#emailExistsMsg').text('Error checking email id.');
                    }
            });
        });
        });

    </script>


